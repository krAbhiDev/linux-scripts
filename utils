#!/bin/bash

# mv all $name files to a new directory called $name
#first print all the files that will be moved and ask for confirmation
#then move the files

#command is like utils <command_type> --args

command_types=("sprite-list" "size")
format_types=("kb" "mb" "gb" "b")
#sprite-list --name <name>  --src <src_dir> --dest <dest_dir>
#src_dir is optional, if not provided, it will be the current directory
#dest_dir is optional, if not provided, it will new directory called <name> in the current directory
function args() {
    echo "args: $@"
}
function sprite-list() {
    name=$1
    if [ -z "$name" ]; then
        echo "Usage: sprite-list --name <name>  --src <src_dir> --dest <dest_dir>"
        exit 1
    fi

    # if no files found, it will print nothing found and exit
    if [ ! -e *$name*.png ]; then
        echo "No files found with name: $name"
        exit 0
    fi

    ls *$name*.png

    #confirm if the user wants to move the files
    read -p "Confirm ? (y/n) " answer
    if [ "$answer" != "y" ]; then
        echo "Aborted"
        exit 0
    fi

    #if dir exist then ask for confirmation
    if [ -d "$name" ]; then
        read -p "Directory $name already exists. Do you want to overwrite it? (y/n) " answer
        if [ "$answer" != "y" ]; then
            echo "Aborted"
            exit 0
        fi
    fi

    #create dir if not exists
    if [ ! -d "$name" ]; then
        echo "Creating directory $name"
        mkdir $name
    fi

    #moving all png files to the new directory
    mv *$name*.png $name

    echo "Moved all files to $name"
    exit 0

}

#print the size of the file or directory in human readable format
#size --file <file>  --format <kb,mb>
function size() {
    file=""
    format="kb"
    # iterate over the arguments  and args is >= 2
    while [ "$#" -gt 1 ]; do
        case "$1" in
        --file)
            file=$2
            #check if file or directory exists
            if [ ! -e $file ]; then
                echo "File or dir not found"
                exit 1
            fi
            shift 2
            ;;
        --format)
            format=$2
            # check if format is valid
            if [[ ! " ${format_types[@]} " =~ " ${format} " ]]; then
                echo "Invalid format $format. Valid formats are " ${format_types[@]}
                exit 1
            fi
            shift 2
            ;;
        *)
            # Ignore other arguments
            ;;
        esac
    done
    if [ -z "$file" ]; then
        echo "Usage: size --file <file>  --format <kb,mb>"
        exit 1
    fi

    if [ -d $file ]; then
        size=$(du -sb $file | awk '{print $1}')
    else
        size=$(du -b $file | awk '{print $1}')
    fi

    # bytes to kb mb gb
    if [ "$format" == "kb" ]; then
        size=$(echo "scale=2; $size/1024" | bc)
    elif [ "$format" == "mb" ]; then
        size=$(echo "scale=2; $size/1024/1024" | bc)
    elif [ "$format" == "gb" ]; then
        size=$(echo "scale=2; $size/1024/1024/1024" | bc)
    else
        #format is bytes
        size=$size
    fi

    echo "Size of $file: $size $format"
    exit 0

}

# Get the command type from the first argument
command_type=$1


if [[ " ${command_types[@]} " =~ " ${command_type} " ]]; then
    shift
    if [ "$(type -t $command_type)" = function ]; then
        $command_type "$@"
    else
        echo "function with name = $command_type not found"
    fi
else
    echo "Usage: utils <command_type> --args"
    echo "Available command types: $command_types"
fi
